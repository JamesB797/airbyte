../../../../connectors/source-metabase/acceptance-test-config.yml
/Users/ella/airbytehq/airbyte/airbyte-integrations/connectors/source-metabase
============================= test session starts ==============================
platform linux -- Python 3.9.11, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: /test_input
plugins: timeout-1.4.2, hypothesis-6.54.6, requests-mock-1.9.3, cov-3.0.0, sugar-0.9.6, mock-3.6.1
collected 35 items / 34 deselected / 1 skipped

../../test_input/test_core.py F                                          [100%]


=================================== FAILURES ===================================
_______________________ TestBasicRead.test_read[inputs0] _______________________

self = <connector_acceptance_test.tests.test_core.TestBasicRead object at 0xffffb1940a90>
connector_config = SecretDict(******)
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='activity', json_schema={'type': [...l_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.overwrite: 'overwrite'>, primary_key=None)])
expect_records_config = None, should_validate_schema = True
should_validate_data_points = False, should_fail_on_extra_columns = True
empty_streams = {EmptyStreamConfiguration(name='activity', bypass_reason='data changes very fast'), EmptyStreamConfiguration(name='col..._reason='data changes very fast'), EmptyStreamConfiguration(name='dashboards', bypass_reason='data changes very fast')}
ignored_fields = {}, expected_records_by_stream = {}
docker_runner = <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0xffffb10333a0>
detailed_logger = <Logger detailed_logger /test_input/acceptance_tests_logs/test_core.py__TestBasicRead__test_read[inputs0].txt (DEBUG)>

    def test_read(
        self,
        connector_config,
        configured_catalog,
        expect_records_config: ExpectedRecordsConfig,
        should_validate_schema: Boolean,
        should_validate_data_points: Boolean,
        should_fail_on_extra_columns: Boolean,
        empty_streams: Set[EmptyStreamConfiguration],
        ignored_fields: Optional[Mapping[str, List[IgnoredFieldsConfiguration]]],
        expected_records_by_stream: MutableMapping[str, List[MutableMapping]],
        docker_runner: ConnectorRunner,
        detailed_logger,
    ):
        output = docker_runner.call_read(connector_config, configured_catalog)
        records = [message.record for message in filter_output(output, Type.RECORD)]
    
        assert records, "At least one record should be read using provided catalog"
    
        if should_validate_schema:  # TODO Conditional logic
>           self._validate_schema(
                records=records, configured_catalog=configured_catalog, fail_on_extra_columns=should_fail_on_extra_columns
            )

connector_acceptance_test/tests/test_core.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [AirbyteRecordMessage(namespace=None, stream='activity', data={'table_id': None, 'table': None, 'database_id': None, '...'2022-01-28T18:01:41.55264Z', 'common_name': 'Augustin Lafanechere'}, 'model': 'card'}, emitted_at=1679407797145), ...]
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='activity', json_schema={'type': [...l_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.overwrite: 'overwrite'>, primary_key=None)])
fail_on_extra_columns = True

    @staticmethod
    def _validate_schema(records: List[AirbyteRecordMessage], configured_catalog: ConfiguredAirbyteCatalog, fail_on_extra_columns: Boolean):
        """
        Check if data type and structure in records matches the one in json_schema of the stream in catalog
        """
        TestBasicRead._validate_records_structure(records, configured_catalog)
        bar = "-" * 80
        streams_errors = verify_records_schema(records, configured_catalog, fail_on_extra_columns)
        for stream_name, errors in streams_errors.items():
            errors = map(str, errors.values())
            str_errors = f"\n{bar}\n".join(errors)
            logging.error(f"\nThe {stream_name} stream has the following schema errors:\n{str_errors}")
    
        if streams_errors:
>           pytest.fail(f"Please check your json_schema in selected streams {tuple(streams_errors.keys())}.")
E           Failed: Please check your json_schema in selected streams ('collections',).

connector_acceptance_test/tests/test_core.py:665: Failed
----------------------------- Captured stdout call -----------------------------
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe collections stream has the following schema errors:\nAdditional properties are not allowed ('created_at', 'entity_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'properties': {'archived': {'type': ['null', 'boolean']},\n                    'authority_level': {'type': ['null', 'string']},\n                    'can_write': {'type': ['null', 'boolean']},\n                    'color': {'type': ['null', 'string']},\n                    'description': {'type': ['null', 'string']},\n                    'id': {'type': ['null', 'integer', 'string']},\n                    'location': {'type': ['null', 'string']},\n                    'name': {'type': ['null', 'string']},\n                    'namespace': {'type': ['null', 'string']},\n                    'personal_owner_id': {'type': ['null', 'integer']},\n                    'slug': {'type': ['null', 'string']}},\n     'type': ['null', 'object']}\n\nOn instance:\n    {'archived': False,\n     'authority_level': None,\n     'can_write': False,\n     'color': '#509EE3',\n     'created_at': '2023-02-08T19:41:23.591313Z',\n     'description': None,\n     'entity_id': 'kka6JPbyOO8alAVdHE1Rl',\n     'id': 330,\n     'location': '/122/',\n     'name': 'Yowan',\n     'namespace': None,\n     'personal_owner_id': None,\n     'slug': 'yowan'}"}}
------------------------------ Captured log call -------------------------------
ERROR    root:test_core.py:662 
The collections stream has the following schema errors:
Additional properties are not allowed ('created_at', 'entity_id' were unexpected)

Failed validating 'additionalProperties' in schema:
    {'additionalProperties': False,
     'properties': {'archived': {'type': ['null', 'boolean']},
                    'authority_level': {'type': ['null', 'string']},
                    'can_write': {'type': ['null', 'boolean']},
                    'color': {'type': ['null', 'string']},
                    'description': {'type': ['null', 'string']},
                    'id': {'type': ['null', 'integer', 'string']},
                    'location': {'type': ['null', 'string']},
                    'name': {'type': ['null', 'string']},
                    'namespace': {'type': ['null', 'string']},
                    'personal_owner_id': {'type': ['null', 'integer']},
                    'slug': {'type': ['null', 'string']}},
     'type': ['null', 'object']}

On instance:
    {'archived': False,
     'authority_level': None,
     'can_write': False,
     'color': '#509EE3',
     'created_at': '2023-02-08T19:41:23.591313Z',
     'description': None,
     'entity_id': 'kka6JPbyOO8alAVdHE1Rl',
     'id': 330,
     'location': '/122/',
     'name': 'Yowan',
     'namespace': None,
     'personal_owner_id': None,
     'slug': 'yowan'}
=========================== short test summary info ============================
FAILED ../../test_input/test_core.py::TestBasicRead::test_read[inputs0] - Fai...
SKIPPED [1] connector_acceptance_test/plugin.py:63: Skipping TestIncremental.test_two_sequential_reads: This connector does not implement incremental sync
================= 1 failed, 1 skipped, 34 deselected in 6.02s ==================
