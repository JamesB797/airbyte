../../../../connectors/source-zendesk-chat/acceptance-test-config.yml
/Users/ella/airbytehq/airbyte/airbyte-integrations/connectors/source-zendesk-chat
============================= test session starts ==============================
platform linux -- Python 3.9.11, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: /test_input
plugins: timeout-1.4.2, hypothesis-6.54.6, requests-mock-1.9.3, cov-3.0.0, sugar-0.9.6, mock-3.6.1
collected 59 items / 56 deselected / 3 selected

../../test_input/test_core.py FF                                         [ 66%]
../../test_input/test_incremental.py .                                   [100%]


=================================== FAILURES ===================================
_______________________ TestBasicRead.test_read[inputs0] _______________________

self = <connector_acceptance_test.tests.test_core.TestBasicRead object at 0xffffada4c9d0>
connector_config = SecretDict(******)
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='accounts', json_schema={'$schema'...ull_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=[['id']])])
expect_records_config = ExpectedRecordsConfig(bypass_reason=None, path=PosixPath('integration_tests/expected_records.txt'), extra_fields=False, exact_order=False, extra_records=True)
should_validate_schema = True, should_validate_data_points = False
should_fail_on_extra_columns = True, empty_streams = set(), ignored_fields = {}
expected_records_by_stream = defaultdict(<class 'list'>, {'accounts': [{'create_date': '2020-12-11T18:33:40Z', 'status': 'active', 'account_key': '...bled': False, 'timeout': 30}, 'auto_idle': {'enabled': False, 'reassignments_before_idle': 3, 'new_status': 'away'}}]})
docker_runner = <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0xffffada42ee0>
detailed_logger = <Logger detailed_logger /test_input/acceptance_tests_logs/test_core.py__TestBasicRead__test_read[inputs0].txt (DEBUG)>

    def test_read(
        self,
        connector_config,
        configured_catalog,
        expect_records_config: ExpectedRecordsConfig,
        should_validate_schema: Boolean,
        should_validate_data_points: Boolean,
        should_fail_on_extra_columns: Boolean,
        empty_streams: Set[EmptyStreamConfiguration],
        ignored_fields: Optional[Mapping[str, List[IgnoredFieldsConfiguration]]],
        expected_records_by_stream: MutableMapping[str, List[MutableMapping]],
        docker_runner: ConnectorRunner,
        detailed_logger,
    ):
        output = docker_runner.call_read(connector_config, configured_catalog)
        records = [message.record for message in filter_output(output, Type.RECORD)]
    
        assert records, "At least one record should be read using provided catalog"
    
        if should_validate_schema:  # TODO Conditional logic
>           self._validate_schema(
                records=records, configured_catalog=configured_catalog, fail_on_extra_columns=should_fail_on_extra_columns
            )

connector_acceptance_test/tests/test_core.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [AirbyteRecordMessage(namespace=None, stream='accounts', data={'create_date': '2020-12-11T18:33:40Z', 'status': 'activ...atus': 'invisible', 'duration': 130.580304, 'id': '360786799676|2021-03-23T12:31:22Z'}, emitted_at=1679429260420), ...]
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='accounts', json_schema={'$schema'...ull_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=[['id']])])
fail_on_extra_columns = True

    @staticmethod
    def _validate_schema(records: List[AirbyteRecordMessage], configured_catalog: ConfiguredAirbyteCatalog, fail_on_extra_columns: Boolean):
        """
        Check if data type and structure in records matches the one in json_schema of the stream in catalog
        """
        TestBasicRead._validate_records_structure(records, configured_catalog)
        bar = "-" * 80
        streams_errors = verify_records_schema(records, configured_catalog, fail_on_extra_columns)
        for stream_name, errors in streams_errors.items():
            errors = map(str, errors.values())
            str_errors = f"\n{bar}\n".join(errors)
            logging.error(f"\nThe {stream_name} stream has the following schema errors:\n{str_errors}")
    
        if streams_errors:
>           pytest.fail(f"Please check your json_schema in selected streams {tuple(streams_errors.keys())}.")
E           Failed: Please check your json_schema in selected streams ('agent_timeline', 'bans').

connector_acceptance_test/tests/test_core.py:665: Failed
----------------------------- Captured stdout call -----------------------------
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe agent_timeline stream has the following schema errors:\nAdditional properties are not allowed ('id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     'additionalProperties': False,\n     'properties': {'agent_id': {'type': ['null', 'integer']},\n                    'duration': {'type': ['null', 'number']},\n                    'engagement_count': {'type': ['null', 'integer']},\n                    'start_time': {'format': 'date-time',\n                                   'type': ['null', 'string']},\n                    'status': {'type': ['null', 'string']}},\n     'type': 'object'}\n\nOn instance:\n    {'agent_id': 360786799676,\n     'duration': 2964.247626,\n     'engagement_count': 0,\n     'id': '360786799676|2023-02-23T16:05:26Z',\n     'start_time': '2023-02-23T16:05:26Z',\n     'status': 'invisible'}"}}
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe bans stream has the following schema errors:\nAdditional properties are not allowed ('created_at' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     'additionalProperties': False,\n     'properties': {'create_date': {'format': 'date-time',\n                                    'type': ['null', 'string']},\n                    'id': {'type': ['integer']},\n                    'ip_address': {'type': ['null', 'string']},\n                    'reason': {'type': ['null', 'string']},\n                    'type': {'type': ['null', 'string']},\n                    'visitor_id': {'type': ['null', 'string']},\n                    'visitor_name': {'type': ['null', 'string']}},\n     'type': 'object'}\n\nOn instance:\n    {'created_at': '2021-04-27T15:52:55Z',\n     'id': 75412441,\n     'reason': 'Spammer',\n     'type': 'visitor',\n     'visitor_id': '10414779.13ojzHuH8u4GiKw',\n     'visitor_name': 'Visitor 7488375'}"}}
------------------------------ Captured log call -------------------------------
ERROR    root:test_core.py:662 
The agent_timeline stream has the following schema errors:
Additional properties are not allowed ('id' was unexpected)

Failed validating 'additionalProperties' in schema:
    {'$schema': 'http://json-schema.org/draft-07/schema#',
     'additionalProperties': False,
     'properties': {'agent_id': {'type': ['null', 'integer']},
                    'duration': {'type': ['null', 'number']},
                    'engagement_count': {'type': ['null', 'integer']},
                    'start_time': {'format': 'date-time',
                                   'type': ['null', 'string']},
                    'status': {'type': ['null', 'string']}},
     'type': 'object'}

On instance:
    {'agent_id': 360786799676,
     'duration': 2964.247626,
     'engagement_count': 0,
     'id': '360786799676|2023-02-23T16:05:26Z',
     'start_time': '2023-02-23T16:05:26Z',
     'status': 'invisible'}
ERROR    root:test_core.py:662 
The bans stream has the following schema errors:
Additional properties are not allowed ('created_at' was unexpected)

Failed validating 'additionalProperties' in schema:
    {'$schema': 'http://json-schema.org/draft-07/schema#',
     'additionalProperties': False,
     'properties': {'create_date': {'format': 'date-time',
                                    'type': ['null', 'string']},
                    'id': {'type': ['integer']},
                    'ip_address': {'type': ['null', 'string']},
                    'reason': {'type': ['null', 'string']},
                    'type': {'type': ['null', 'string']},
                    'visitor_id': {'type': ['null', 'string']},
                    'visitor_name': {'type': ['null', 'string']}},
     'type': 'object'}

On instance:
    {'created_at': '2021-04-27T15:52:55Z',
     'id': 75412441,
     'reason': 'Spammer',
     'type': 'visitor',
     'visitor_id': '10414779.13ojzHuH8u4GiKw',
     'visitor_name': 'Visitor 7488375'}
_______________________ TestBasicRead.test_read[inputs1] _______________________

self = <connector_acceptance_test.tests.test_core.TestBasicRead object at 0xffffad8e1fa0>
connector_config = SecretDict(******)
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='accounts', json_schema={'$schema'...ull_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=[['id']])])
expect_records_config = ExpectedRecordsConfig(bypass_reason=None, path=PosixPath('integration_tests/expected_records.txt'), extra_fields=False, exact_order=False, extra_records=True)
should_validate_schema = True, should_validate_data_points = False
should_fail_on_extra_columns = True, empty_streams = set(), ignored_fields = {}
expected_records_by_stream = defaultdict(<class 'list'>, {'accounts': [{'create_date': '2020-12-11T18:33:40Z', 'status': 'active', 'account_key': '...bled': False, 'timeout': 30}, 'auto_idle': {'enabled': False, 'reassignments_before_idle': 3, 'new_status': 'away'}}]})
docker_runner = <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0xffffad8e1940>
detailed_logger = <Logger detailed_logger /test_input/acceptance_tests_logs/test_core.py__TestBasicRead__test_read[inputs1].txt (DEBUG)>

    def test_read(
        self,
        connector_config,
        configured_catalog,
        expect_records_config: ExpectedRecordsConfig,
        should_validate_schema: Boolean,
        should_validate_data_points: Boolean,
        should_fail_on_extra_columns: Boolean,
        empty_streams: Set[EmptyStreamConfiguration],
        ignored_fields: Optional[Mapping[str, List[IgnoredFieldsConfiguration]]],
        expected_records_by_stream: MutableMapping[str, List[MutableMapping]],
        docker_runner: ConnectorRunner,
        detailed_logger,
    ):
        output = docker_runner.call_read(connector_config, configured_catalog)
        records = [message.record for message in filter_output(output, Type.RECORD)]
    
        assert records, "At least one record should be read using provided catalog"
    
        if should_validate_schema:  # TODO Conditional logic
>           self._validate_schema(
                records=records, configured_catalog=configured_catalog, fail_on_extra_columns=should_fail_on_extra_columns
            )

connector_acceptance_test/tests/test_core.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [AirbyteRecordMessage(namespace=None, stream='accounts', data={'create_date': '2020-12-11T18:33:40Z', 'status': 'activ...atus': 'invisible', 'duration': 130.580304, 'id': '360786799676|2021-03-23T12:31:22Z'}, emitted_at=1679429266838), ...]
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='accounts', json_schema={'$schema'...ull_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.append: 'append'>, primary_key=[['id']])])
fail_on_extra_columns = True

    @staticmethod
    def _validate_schema(records: List[AirbyteRecordMessage], configured_catalog: ConfiguredAirbyteCatalog, fail_on_extra_columns: Boolean):
        """
        Check if data type and structure in records matches the one in json_schema of the stream in catalog
        """
        TestBasicRead._validate_records_structure(records, configured_catalog)
        bar = "-" * 80
        streams_errors = verify_records_schema(records, configured_catalog, fail_on_extra_columns)
        for stream_name, errors in streams_errors.items():
            errors = map(str, errors.values())
            str_errors = f"\n{bar}\n".join(errors)
            logging.error(f"\nThe {stream_name} stream has the following schema errors:\n{str_errors}")
    
        if streams_errors:
>           pytest.fail(f"Please check your json_schema in selected streams {tuple(streams_errors.keys())}.")
E           Failed: Please check your json_schema in selected streams ('agent_timeline', 'bans').

connector_acceptance_test/tests/test_core.py:665: Failed
----------------------------- Captured stdout call -----------------------------
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe agent_timeline stream has the following schema errors:\nAdditional properties are not allowed ('id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     'additionalProperties': False,\n     'properties': {'agent_id': {'type': ['null', 'integer']},\n                    'duration': {'type': ['null', 'number']},\n                    'engagement_count': {'type': ['null', 'integer']},\n                    'start_time': {'format': 'date-time',\n                                   'type': ['null', 'string']},\n                    'status': {'type': ['null', 'string']}},\n     'type': 'object'}\n\nOn instance:\n    {'agent_id': 360786799676,\n     'duration': 2964.247626,\n     'engagement_count': 0,\n     'id': '360786799676|2023-02-23T16:05:26Z',\n     'start_time': '2023-02-23T16:05:26Z',\n     'status': 'invisible'}"}}
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe bans stream has the following schema errors:\nAdditional properties are not allowed ('created_at' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     'additionalProperties': False,\n     'properties': {'create_date': {'format': 'date-time',\n                                    'type': ['null', 'string']},\n                    'id': {'type': ['integer']},\n                    'ip_address': {'type': ['null', 'string']},\n                    'reason': {'type': ['null', 'string']},\n                    'type': {'type': ['null', 'string']},\n                    'visitor_id': {'type': ['null', 'string']},\n                    'visitor_name': {'type': ['null', 'string']}},\n     'type': 'object'}\n\nOn instance:\n    {'created_at': '2021-04-27T15:52:55Z',\n     'id': 75412441,\n     'reason': 'Spammer',\n     'type': 'visitor',\n     'visitor_id': '10414779.13ojzHuH8u4GiKw',\n     'visitor_name': 'Visitor 7488375'}"}}
------------------------------ Captured log call -------------------------------
ERROR    root:test_core.py:662 
The agent_timeline stream has the following schema errors:
Additional properties are not allowed ('id' was unexpected)

Failed validating 'additionalProperties' in schema:
    {'$schema': 'http://json-schema.org/draft-07/schema#',
     'additionalProperties': False,
     'properties': {'agent_id': {'type': ['null', 'integer']},
                    'duration': {'type': ['null', 'number']},
                    'engagement_count': {'type': ['null', 'integer']},
                    'start_time': {'format': 'date-time',
                                   'type': ['null', 'string']},
                    'status': {'type': ['null', 'string']}},
     'type': 'object'}

On instance:
    {'agent_id': 360786799676,
     'duration': 2964.247626,
     'engagement_count': 0,
     'id': '360786799676|2023-02-23T16:05:26Z',
     'start_time': '2023-02-23T16:05:26Z',
     'status': 'invisible'}
ERROR    root:test_core.py:662 
The bans stream has the following schema errors:
Additional properties are not allowed ('created_at' was unexpected)

Failed validating 'additionalProperties' in schema:
    {'$schema': 'http://json-schema.org/draft-07/schema#',
     'additionalProperties': False,
     'properties': {'create_date': {'format': 'date-time',
                                    'type': ['null', 'string']},
                    'id': {'type': ['integer']},
                    'ip_address': {'type': ['null', 'string']},
                    'reason': {'type': ['null', 'string']},
                    'type': {'type': ['null', 'string']},
                    'visitor_id': {'type': ['null', 'string']},
                    'visitor_name': {'type': ['null', 'string']}},
     'type': 'object'}

On instance:
    {'created_at': '2021-04-27T15:52:55Z',
     'id': 75412441,
     'reason': 'Spammer',
     'type': 'visitor',
     'visitor_id': '10414779.13ojzHuH8u4GiKw',
     'visitor_name': 'Visitor 7488375'}
=========================== short test summary info ============================
FAILED ../../test_input/test_core.py::TestBasicRead::test_read[inputs0] - Fai...
FAILED ../../test_input/test_core.py::TestBasicRead::test_read[inputs1] - Fai...
================= 2 failed, 1 passed, 56 deselected in 42.04s ==================
