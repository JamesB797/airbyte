../../../../connectors/source-sonar-cloud/acceptance-test-config.yml
/Users/ella/airbytehq/airbyte/airbyte-integrations/connectors/source-sonar-cloud
============================= test session starts ==============================
platform linux -- Python 3.9.11, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: /test_input
plugins: timeout-1.4.2, hypothesis-6.54.6, requests-mock-1.9.3, cov-3.0.0, sugar-0.9.6, mock-3.6.1
collected 34 items / 33 deselected / 1 skipped

../../test_input/test_core.py F                                          [100%]


=================================== FAILURES ===================================
_______________________ TestBasicRead.test_read[inputs0] _______________________

self = <connector_acceptance_test.tests.test_core.TestBasicRead object at 0xffffac36cca0>
connector_config = SecretDict(******)
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='components', json_schema={'$schem...l_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.overwrite: 'overwrite'>, primary_key=None)])
expect_records_config = None, should_validate_schema = True
should_validate_data_points = False, should_fail_on_extra_columns = True
empty_streams = set(), ignored_fields = {}, expected_records_by_stream = {}
docker_runner = <connector_acceptance_test.utils.connector_runner.ConnectorRunner object at 0xffffabfc9730>
detailed_logger = <Logger detailed_logger /test_input/acceptance_tests_logs/test_core.py__TestBasicRead__test_read[inputs0].txt (DEBUG)>

    def test_read(
        self,
        connector_config,
        configured_catalog,
        expect_records_config: ExpectedRecordsConfig,
        should_validate_schema: Boolean,
        should_validate_data_points: Boolean,
        should_fail_on_extra_columns: Boolean,
        empty_streams: Set[EmptyStreamConfiguration],
        ignored_fields: Optional[Mapping[str, List[IgnoredFieldsConfiguration]]],
        expected_records_by_stream: MutableMapping[str, List[MutableMapping]],
        docker_runner: ConnectorRunner,
        detailed_logger,
    ):
        output = docker_runner.call_read(connector_config, configured_catalog)
        records = [message.record for message in filter_output(output, Type.RECORD)]
    
        assert records, "At least one record should be read using provided catalog"
    
        if should_validate_schema:  # TODO Conditional logic
>           self._validate_schema(
                records=records, configured_catalog=configured_catalog, fail_on_extra_columns=should_fail_on_extra_columns
            )

connector_acceptance_test/tests/test_core.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

records = [AirbyteRecordMessage(namespace=None, stream='components', data={'organization': 'woop', 'key': 'woop-function-update-...ey': 'woop-collect', 'name': 'collect', 'qualifier': 'TRK', 'project': 'woop-collect'}, emitted_at=1679412162185), ...]
configured_catalog = ConfiguredAirbyteCatalog(streams=[ConfiguredAirbyteStream(stream=AirbyteStream(name='components', json_schema={'$schem...l_refresh'>, cursor_field=None, destination_sync_mode=<DestinationSyncMode.overwrite: 'overwrite'>, primary_key=None)])
fail_on_extra_columns = True

    @staticmethod
    def _validate_schema(records: List[AirbyteRecordMessage], configured_catalog: ConfiguredAirbyteCatalog, fail_on_extra_columns: Boolean):
        """
        Check if data type and structure in records matches the one in json_schema of the stream in catalog
        """
        TestBasicRead._validate_records_structure(records, configured_catalog)
        bar = "-" * 80
        streams_errors = verify_records_schema(records, configured_catalog, fail_on_extra_columns)
        for stream_name, errors in streams_errors.items():
            errors = map(str, errors.values())
            str_errors = f"\n{bar}\n".join(errors)
            logging.error(f"\nThe {stream_name} stream has the following schema errors:\n{str_errors}")
    
        if streams_errors:
>           pytest.fail(f"Please check your json_schema in selected streams {tuple(streams_errors.keys())}.")
E           Failed: Please check your json_schema in selected streams ('metrics',).

connector_acceptance_test/tests/test_core.py:665: Failed
----------------------------- Captured stdout call -----------------------------
{"type": "LOG", "log": {"level": "ERROR", "message": "\nThe metrics stream has the following schema errors:\nAdditional properties are not allowed ('decimalScale' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     'additionalProperties': False,\n     'properties': {'description': {'type': 'string'},\n                    'direction': {'type': 'number'},\n                    'domain': {'type': 'string'},\n                    'hidden': {'type': 'boolean'},\n                    'id': {'type': 'string'},\n                    'key': {'type': 'string'},\n                    'name': {'type': 'string'},\n                    'qualitative': {'type': 'boolean'},\n                    'type': {'type': 'string'}},\n     'type': 'object'}\n\nOn instance:\n    {'decimalScale': 1,\n     'description': 'Density of successful unit tests',\n     'direction': 1,\n     'domain': 'Coverage',\n     'hidden': False,\n     'id': '15',\n     'key': 'test_success_density',\n     'name': 'Unit Test Success (%)',\n     'qualitative': True,\n     'type': 'PERCENT'}"}}
------------------------------ Captured log call -------------------------------
ERROR    root:test_core.py:662 
The metrics stream has the following schema errors:
Additional properties are not allowed ('decimalScale' was unexpected)

Failed validating 'additionalProperties' in schema:
    {'$schema': 'http://json-schema.org/draft-07/schema#',
     'additionalProperties': False,
     'properties': {'description': {'type': 'string'},
                    'direction': {'type': 'number'},
                    'domain': {'type': 'string'},
                    'hidden': {'type': 'boolean'},
                    'id': {'type': 'string'},
                    'key': {'type': 'string'},
                    'name': {'type': 'string'},
                    'qualitative': {'type': 'boolean'},
                    'type': {'type': 'string'}},
     'type': 'object'}

On instance:
    {'decimalScale': 1,
     'description': 'Density of successful unit tests',
     'direction': 1,
     'domain': 'Coverage',
     'hidden': False,
     'id': '15',
     'key': 'test_success_density',
     'name': 'Unit Test Success (%)',
     'qualitative': True,
     'type': 'PERCENT'}
=========================== short test summary info ============================
FAILED ../../test_input/test_core.py::TestBasicRead::test_read[inputs0] - Fai...
SKIPPED [1] connector_acceptance_test/plugin.py:63: Skipping TestIncremental.test_two_sequential_reads: This connector does not implement incremental sync
================= 1 failed, 1 skipped, 33 deselected in 7.03s ==================
