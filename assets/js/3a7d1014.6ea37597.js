"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[24269],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},89530:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={},o="Retrieving Records Spread Across Partitions",s={unversionedId:"connector-development/config-based/understanding-the-yaml-file/partition-router",id:"connector-development/config-based/understanding-the-yaml-file/partition-router",title:"Retrieving Records Spread Across Partitions",description:"In some cases, the data you are replicating is spread across multiple partitions. You can specify a set of parameters to be iterated over and used while requesting all of your data. On each iteration, using the current element being iterated upon, the connector will perform a cycle of requesting data from your source.",source:"@site/../docs/connector-development/config-based/understanding-the-yaml-file/partition-router.md",sourceDirName:"connector-development/config-based/understanding-the-yaml-file",slug:"/connector-development/config-based/understanding-the-yaml-file/partition-router",permalink:"/connector-development/config-based/understanding-the-yaml-file/partition-router",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/understanding-the-yaml-file/partition-router.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Pagination",permalink:"/connector-development/config-based/understanding-the-yaml-file/pagination"},next:{title:"Record selector",permalink:"/connector-development/config-based/understanding-the-yaml-file/record-selector"}},l={},p=[{value:"ListPartitionRouter",id:"listpartitionrouter",level:2},{value:"SubstreamPartitionRouter",id:"substreampartitionrouter",level:2},{value:"Nested streams",id:"nested-streams",level:2},{value:"More readings",id:"more-readings",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"retrieving-records-spread-across-partitions"},"Retrieving Records Spread Across Partitions"),(0,a.kt)("p",null,"In some cases, the data you are replicating is spread across multiple partitions. You can specify a set of parameters to be iterated over and used while requesting all of your data. On each iteration, using the current element being iterated upon, the connector will perform a cycle of requesting data from your source."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PartitionRouter"),"s gives you the ability to specify either a static or dynamic set of elements that will be iterated over one at a time. This in turn is used to route requests to a partition of your data according to the elements iterated over."),(0,a.kt)("p",null,"The most common use case for the ",(0,a.kt)("inlineCode",{parentName:"p"},"PartitionRouter")," component is the retrieval of data from an API endpoint that requires extra request inputs to indicate which partition of data to fetch."),(0,a.kt)("p",null,"Schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  partition_router:\n    default: []\n    anyOf:\n      - "$ref": "#/definitions/CustomPartitionRouter"\n      - "$ref": "#/definitions/ListPartitionRouter"\n      - "$ref": "#/definitions/SubstreamPartitionRouter"\n      - type: array\n        items:\n          anyOf:\n            - "$ref": "#/definitions/CustomPartitionRouter"\n            - "$ref": "#/definitions/ListPartitionRouter"\n            - "$ref": "#/definitions/SubstreamPartitionRouter"\n')),(0,a.kt)("p",null,"Notice that you can specify one or more ",(0,a.kt)("inlineCode",{parentName:"p"},"PartitionRouter"),"s on a Retriever. When multiple are defined, the result will be Cartesian product of all partitions and a request cycle will be performed for each permutation."),(0,a.kt)("h2",{id:"listpartitionrouter"},"ListPartitionRouter"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ListPartitionRouter")," iterates over values from a given list. It is defined by"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The partition values, which are the valid values for the cursor field"),(0,a.kt)("li",{parentName:"ul"},"The cursor field on a record"),(0,a.kt)("li",{parentName:"ul"},"request_option: optional request option to set on outgoing request parameters")),(0,a.kt)("p",null,"Schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  ListPartitionRouter:\n    description: Partition router that is used to retrieve records that have been partitioned according to a list of values\n    type: object\n    required:\n      - type\n      - cursor_field\n      - slice_values\n    properties:\n      type:\n        type: string\n        enum: [ListPartitionRouter]\n      cursor_field:\n        type: string\n      partition_values:\n        anyOf:\n          - type: string\n          - type: array\n            items:\n              type: string\n      request_option:\n        "$ref": "#/definitions/RequestOption"\n      $parameters:\n        type: object\n        additionalProperties: true\n')),(0,a.kt)("p",null,'As an example, this partition router will iterate over the 2 repositories ("airbyte" and "airbyte-secret") and will set a request_parameter on outgoing HTTP requests.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'partition_router:\n  type: ListPartitionRouter\n  values:\n    - "airbyte"\n    - "airbyte-secret"\n  cursor_field: "repository"\n  request_option:\n    type: RequestOption\n    field_name: "repository"\n    inject_into: "request_parameter"\n')),(0,a.kt)("h2",{id:"substreampartitionrouter"},"SubstreamPartitionRouter"),(0,a.kt)("p",null,"Substreams are streams that depend on the records of another stream"),(0,a.kt)("p",null,"We might for instance want to read all the commits for a given repository (parent stream)."),(0,a.kt)("p",null,"Substreams are implemented by defining their partition router as a ",(0,a.kt)("inlineCode",{parentName:"p"},"SubstreamPartitionRouter"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SubstreamPartitionRouter")," is used to route requests to fetch data that has been partitioned according to a parent stream's records . We might for instance want to read all the commits for a given repository (parent resource)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"what the parent stream is"),(0,a.kt)("li",{parentName:"ul"},"what is the key of the records in the parent stream"),(0,a.kt)("li",{parentName:"ul"},"what is the attribute on the parent record that is being used to partition the substream data"),(0,a.kt)("li",{parentName:"ul"},"how to specify that attribute on an outgoing HTTP request to retrieve that set of records")),(0,a.kt)("p",null,"Schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  SubstreamPartitionRouter:\n    description: Partition router that is used to retrieve records that have been partitioned according to records from the specified parent streams\n    type: object\n    required:\n      - type\n      - parent_stream_configs\n    properties:\n      type:\n        type: string\n        enum: [SubstreamPartitionRouter]\n      parent_stream_configs:\n        type: array\n        items:\n          "$ref": "#/definitions/ParentStreamConfig"\n      $parameters:\n        type: object\n        additionalProperties: true\n')),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'partition_router:\n  type: SubstreamPartitionRouter\n  parent_streams_configs:\n    - stream: "#/repositories_stream"\n      parent_key: "id"\n      partition_field: "repository"\n      request_option:\n        type: RequestOption\n        field_name: "repository"\n        inject_into: "request_parameter"\n')),(0,a.kt)("p",null,'REST APIs often nest sub-resources in the URL path.\nIf the URL to fetch commits was "/repositories/:id/commits", then the ',(0,a.kt)("inlineCode",{parentName:"p"},"Requester"),"'s path would need to refer to the stream slice's value and no ",(0,a.kt)("inlineCode",{parentName:"p"},"request_option")," would be set:"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'retriever:\n  <...>\n  requester:\n    <...>\n    path: "/respositories/{{ stream_slice.repository }}/commits"\n  partition_router:\n    type: SubstreamPartitionRouter\n    parent_streams_configs:\n      - stream: "#/repositories_stream"\n        parent_key: "id"\n        partition_field: "repository"\n')),(0,a.kt)("h2",{id:"nested-streams"},"Nested streams"),(0,a.kt)("p",null,"Nested streams, subresources, or streams that depend on other streams can be implemented using a ",(0,a.kt)("a",{parentName:"p",href:"#SubstreamPartitionRouter"},(0,a.kt)("inlineCode",{parentName:"a"},"SubstreamPartitionRouter"))),(0,a.kt)("h2",{id:"more-readings"},"More readings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/connector-development/cdk-python/incremental-stream"},"Incremental streams")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/connector-development/cdk-python/stream-slices"},"Stream slices"))),(0,a.kt)("p",null,(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," This is a slight oversimplification. See ",(0,a.kt)("a",{parentName:"p",href:"#cursor-update"},"update cursor section")," for more details on how the cursor is updated."))}c.isMDXComponent=!0}}]);