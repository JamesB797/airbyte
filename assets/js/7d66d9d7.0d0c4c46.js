"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[67575],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(g,l(l({ref:t},s),{},{components:n})):o.createElement(g,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},37994:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},l="Testing The Local Catalog",i={unversionedId:"connector-development/testing-connectors/testing-a-local-catalog-in-development",id:"connector-development/testing-connectors/testing-a-local-catalog-in-development",title:"Testing The Local Catalog",description:"Purpose of this document",source:"@site/../docs/connector-development/testing-connectors/testing-a-local-catalog-in-development.md",sourceDirName:"connector-development/testing-connectors",slug:"/connector-development/testing-connectors/testing-a-local-catalog-in-development",permalink:"/connector-development/testing-connectors/testing-a-local-catalog-in-development",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/testing-connectors/testing-a-local-catalog-in-development.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Standard Source Test Suite",permalink:"/connector-development/testing-connectors/standard-source-tests"},next:{title:"Connector Specification Reference",permalink:"/connector-development/connector-specification-reference"}},c={},p=[{value:"Purpose of this document",id:"purpose-of-this-document",level:2},{value:"Why you might need to",id:"why-you-might-need-to",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Generate the OSS Catalog",id:"1-generate-the-oss-catalog",level:3},{value:"2. Move the OSS catalog to platform",id:"2-move-the-oss-catalog-to-platform",level:3},{value:"3. Point the platform to the new catalog",id:"3-point-the-platform-to-the-new-catalog",level:3},{value:"4. Build the platform",id:"4-build-the-platform",level:3},{value:"4. Run platform",id:"4-run-platform",level:3}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-the-local-catalog"},"Testing The Local Catalog"),(0,a.kt)("h2",{id:"purpose-of-this-document"},"Purpose of this document"),(0,a.kt)("p",null,"This document describes how to"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Generate the OSS catalog in the ",(0,a.kt)("inlineCode",{parentName:"li"},"airbyte")," repo"),(0,a.kt)("li",{parentName:"ol"},"Move the OSS catalog to the ",(0,a.kt)("inlineCode",{parentName:"li"},"airbyte-platform")," repo"),(0,a.kt)("li",{parentName:"ol"},"Point the platform to the new catalog"),(0,a.kt)("li",{parentName:"ol"},"Run the platform")),(0,a.kt)("h2",{id:"why-you-might-need-to"},"Why you might need to"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You've added/updated/deleted a generally available connector and want to test it in the platform UI"),(0,a.kt)("li",{parentName:"ol"},"You've added/updated/deleted a generally available connector and want to test it in the platform API")),(0,a.kt)("h2",{id:"steps"},"Steps"),(0,a.kt)("h3",{id:"1-generate-the-oss-catalog"},"1. Generate the OSS Catalog"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"airbyte")," repo run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"SUB_BUILD=ALL_CONNECTORS ./gradlew :airbyte-config:specs:generateOssConnectorCatalog\n")),(0,a.kt)("h3",{id:"2-move-the-oss-catalog-to-platform"},"2. Move the OSS catalog to platform"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"airbyte")," repo run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cp airbyte-config/init/src/main/resources/seed/oss_catalog.json <PATH_TO_PLATFORM_REPO>/airbyte-config/init/src/main/resources/seed/local_dev_catalog.json\n")),(0,a.kt)("h3",{id:"3-point-the-platform-to-the-new-catalog"},"3. Point the platform to the new catalog"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"airbyte-platform")," repo modify ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," add the environment variable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"LOCAL_CONNECTOR_CATALOG_PATH=seed/local_dev_catalog.json\n")),(0,a.kt)("h3",{id:"4-build-the-platform"},"4. Build the platform"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"airbyte-platform")," run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"SUB_BUILD=PLATFORM ./gradlew build -x test\n")),(0,a.kt)("h3",{id:"4-run-platform"},"4. Run platform"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"airbyte-platform")," run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"VERSION=dev docker-compose up\n")),(0,a.kt)("p",null,"Success! Your new catalog should now be loaded into the database."))}d.isMDXComponent=!0}}]);