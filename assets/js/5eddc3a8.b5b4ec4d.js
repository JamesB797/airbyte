"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[96481],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=o,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},20928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const a={},i="Requester",s={unversionedId:"connector-development/config-based/understanding-the-yaml-file/requester",id:"connector-development/config-based/understanding-the-yaml-file/requester",title:"Requester",description:"The Requester defines how to prepare HTTP requests to send to the source API.",source:"@site/../docs/connector-development/config-based/understanding-the-yaml-file/requester.md",sourceDirName:"connector-development/config-based/understanding-the-yaml-file",slug:"/connector-development/config-based/understanding-the-yaml-file/requester",permalink:"/connector-development/config-based/understanding-the-yaml-file/requester",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/understanding-the-yaml-file/requester.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Understanding the YAML file",permalink:"/connector-development/config-based/understanding-the-yaml-file/yaml-overview"},next:{title:"Request Options",permalink:"/connector-development/config-based/understanding-the-yaml-file/request-options"}},l={},d=[{value:"Configuring request parameters and headers",id:"configuring-request-parameters-and-headers",level:2},{value:"More readings",id:"more-readings",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"requester"},"Requester"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Requester")," defines how to prepare HTTP requests to send to the source API.\nThere is currently only one implementation, the ",(0,o.kt)("inlineCode",{parentName:"p"},"HttpRequester"),", which is defined by"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A base url: The root of the API source"),(0,o.kt)("li",{parentName:"ol"},"A path: The specific endpoint to fetch data from for a resource"),(0,o.kt)("li",{parentName:"ol"},"The HTTP method: the HTTP method to use (GET or POST)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/connector-development/config-based/understanding-the-yaml-file/request-options#request-options-provider"},"A request options provider"),": Defines the request parameters (query parameters), headers, and request body to set on outgoing HTTP requests"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/connector-development/config-based/understanding-the-yaml-file/authentication"},"An authenticator"),": Defines how to authenticate to the source"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/connector-development/config-based/understanding-the-yaml-file/error-handling"},"An error handler"),": Defines how to handle errors")),(0,o.kt)("p",null,"The schema of a requester object is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'  Requester:\n    type: object\n    anyOf:\n      - "$ref": "#/definitions/HttpRequester"\n  HttpRequester:\n    type: object\n    additionalProperties: true\n    required:\n      - url_base\n      - path\n    properties:\n      "$parameters":\n        "$ref": "#/definitions/$parameters"\n      url_base:\n        type: string\n        description: "base url"\n      path:\n        type: string\n        description: "path"\n      http_method:\n        "$ref": "#/definitions/HttpMethod"\n        default: "GET"\n      request_options_provider:\n        "$ref": "#/definitions/RequestOptionsProvider"\n      authenticator:\n        "$ref": "#/definitions/Authenticator"\n      error_handler:\n        "$ref": "#/definitions/ErrorHandler"\n  HttpMethod:\n    type: string\n    enum:\n      - GET\n      - POST\n')),(0,o.kt)("h2",{id:"configuring-request-parameters-and-headers"},"Configuring request parameters and headers"),(0,o.kt)("p",null,"The primary way to set request parameters and headers is to define them as key-value pairs using a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestOptionsProvider"),".\nOther components, such as an ",(0,o.kt)("inlineCode",{parentName:"p"},"Authenticator")," can also set additional request params or headers as needed."),(0,o.kt)("p",null,"Additionally, some stateful components use a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestOption")," to configure the options and update the value. Example of such components are ",(0,o.kt)("a",{parentName:"p",href:"/connector-development/config-based/understanding-the-yaml-file/pagination"},"Paginators")," and ",(0,o.kt)("a",{parentName:"p",href:"/connector-development/config-based/understanding-the-yaml-file/partition-router"},"Partition routers"),"."),(0,o.kt)("h2",{id:"more-readings"},"More readings"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/connector-development/config-based/understanding-the-yaml-file/request-options"},"Request options"))))}u.isMDXComponent=!0}}]);