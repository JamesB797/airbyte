"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[65887],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},34658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={},i="Step 3: Define Inputs",c={unversionedId:"connector-development/tutorials/cdk-tutorial-python-http/define-inputs",id:"connector-development/tutorials/cdk-tutorial-python-http/define-inputs",title:"Step 3: Define Inputs",description:"Each connector declares the inputs it needs to read data from the underlying data source. This is the Airbyte Protocol's spec operation.",source:"@site/../docs/connector-development/tutorials/cdk-tutorial-python-http/define-inputs.md",sourceDirName:"connector-development/tutorials/cdk-tutorial-python-http",slug:"/connector-development/tutorials/cdk-tutorial-python-http/define-inputs",permalink:"/connector-development/tutorials/cdk-tutorial-python-http/define-inputs",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/tutorials/cdk-tutorial-python-http/define-inputs.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Step 2: Install Dependencies",permalink:"/connector-development/tutorials/cdk-tutorial-python-http/install-dependencies"},next:{title:"Step 4: Connection Checking",permalink:"/connector-development/tutorials/cdk-tutorial-python-http/connection-checking"}},p={},s=[],l={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-3-define-inputs"},"Step 3: Define Inputs"),(0,a.kt)("p",null,"Each connector declares the inputs it needs to read data from the underlying data source. This is the Airbyte Protocol's ",(0,a.kt)("inlineCode",{parentName:"p"},"spec")," operation."),(0,a.kt)("p",null,"The simplest way to implement this is by creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"source_<name>/spec.yaml")," which describes your connector's inputs according to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/docs/understanding-airbyte/airbyte-protocol.md#spec"},"ConnectorSpecification")," schema. This is a good place to start when developing your source. Using JsonSchema, define what the inputs are ","(","e.g. username and password",")",". Here's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-stripe/source_stripe/spec.yaml"},"an example")," of what the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.yaml")," looks like for the Stripe API source."),(0,a.kt)("p",null,"For more details on what the spec is, you can read about the Airbyte Protocol ",(0,a.kt)("a",{parentName:"p",href:"https://docs.airbyte.io/understanding-airbyte/airbyte-protocol"},"here"),"."),(0,a.kt)("p",null,"The generated code that Airbyte provides, handles implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec")," method for you. It assumes that there will be a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.yaml")," in the same directory as ",(0,a.kt)("inlineCode",{parentName:"p"},"source.py"),". If you have declared the necessary JsonSchema in ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.yaml")," you should be done with this step."),(0,a.kt)("p",null,"Given that we'll pulling currency data for our example source, we'll define the following ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'documentationUrl: https://docs.airbyte.io/integrations/sources/exchangeratesapi\nconnectionSpecification:\n  $schema: http://json-schema.org/draft-07/schema#\n  title: Python Http Tutorial Spec\n  type: object\n  required:\n    - apikey\n    - start_date\n    - base\n  properties:\n    apikey:\n      type: string\n      description: API access key used to retrieve data from the Exchange Rates API.\n      airbyte_secret: true\n    start_date:\n      type: string\n      description: Start getting data from that date.\n      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$\n      examples:\n        - "%Y-%m-%d"\n    base:\n      type: string\n      examples:\n        - USD\n        - EUR\n      description: "ISO reference currency. See <a href=\\"https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\\">here</a>."\n')),(0,a.kt)("p",null,"In addition to metadata, we define three inputs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"apikey"),": The API access key used to authenticate requests to the API"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_date"),": The beginning date to start tracking currency exchange rates from"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"base"),": The currency whose rates we're interested in tracking")))}u.isMDXComponent=!0}}]);